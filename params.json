{"name":"Stocks-standarddeviation-assignment","tagline":"The code in this repo is the result of an interview exercise that was given to me. It involves stocks, some basic stats and a bit of web scraping.","body":"# A look at the adjusting closing price of stocks from January 1, 2015 to September 28, 2015\r\n\r\n## Overview\r\n***\r\nThe work presented in this report is a coding problem assignment that was giving to me during the hiring process for a data engineer position. Because the assignment was kind cool, I decided to make a report out of it.\r\n\r\nThe task of this assignment was to find the S&P stock with the highest adjusting close price standard deviation for the period January 1, 2015 until September 28, 2015.\r\n\r\n### Tools used\r\n* Python and Pandas\r\n* R and rvest for scraping the stocks list\r\n\r\n## The solution\r\n***\r\nAs mentioned previously, the purpose of this assignment was to find the S&P stock with the highest close price standard deviation during a given period of time. So, the first part of the problem is to find the stocks list, since it was not given and it is kind of silly to write them in the code (there a bit over 500 stocks). To do this, I used R's [rvest](https://cran.r-project.org/web/packages/rvest/rvest.pdf) web scraping package.\r\n\r\n### Scraping the stocks list\r\nThe data was scraped from the Wikipedia page [_List of S&P 500 companies_](https://en.wikipedia.org/wiki/List_of_S%26P_500_companies). If you see the page, it has a table with the 505 common stocks. R's rvest package works by specifying the css selector that matches the data we want. To find the css selector I wanted, I used the [SelectorGadget](http://selectorgadget.com/) widget. If you use the gadget in the page I linked before, you will see that the selector tag containing the stock code is `tr:nth-child(i) td:nth-child(1)`, where `i` is the position of the stock (starting from 2) in the table.\r\n\r\nThis is the R script for scraping the stocks.\r\n\r\n```r\r\nlibrary(rvest)\r\nstocks <- data.frame(stock = character(), stringsAsFactors = FALSE)\r\nstocks.site <- read_html('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')\r\nfor (i in 2:506) {\r\nstock.symbol <- stocks.site %>% \r\n                  html_node(paste0(\"tr:nth-child(\", i, \") td:nth-child(1) .text\")) %>%\r\n                  html_text()\r\nstocks[i - 1, 1] <-stock.symbol\r\n}\r\n\r\nwrite.table(stocks, file = 'stocks_list.txt', col.names = FALSE, row.names = FALSE,\r\n            quote = FALSE)\r\n```\r\n\r\nNow that we have scraped the data, it's time for writing the solution.\r\n\r\n### Finding the highest adjusting close price standard deviation\r\n\r\nThe first step is to load the required libraries. As I mentioned at the beginning, we'll be using the Pandas library.\r\n\r\n```python\r\nimport datetime\r\nimport pandas as pd\r\nimport pandas.io.data\r\n```\r\n\r\nRead the data and create an empty list that will have the stocks.\r\n\r\n```python\r\n# Load the stocks codes from an external file\r\nstocks_file = open('stocks_list.txt', 'r')\r\nstocks_list = []\r\n```\r\n\r\nSpecify the time period\r\n\r\n```python\r\n# Note: the stock market is closed on New Year's Day\r\nstart_date = datetime.datetime(2015, 1, 1)\r\nend_date = datetime.datetime(2015, 9, 28)\r\n```\r\n\r\nTo keep track of the largest standard deviation and its stock, I used a dictionary that will be updated each time the program finds a standard deviation greater than the current one.\r\n\r\n```python\r\n# This dict has the current stock with the highest std\r\ncurrent_highest_adjclose = {'stock': 'placeholder', 'stdev': -1}\r\n```\r\n\r\nNow that the structures have been created, it's time to add the stocks to `stocks_list`.\r\n\r\n```python\r\n# Add the stocks to a new list while removing \\n\r\nfor line in stocks_file:\r\n    stocks_list.append(line.strip('\\n'))\r\n```\r\n\r\nThe next piece of code is the main part of the script. It is a loop that iterates through the stocks list and do the following:\r\n* It looks for the stock `stock` using `pd.io.data.get_data_yahoo` ,which returns a dataframe. From said dataframe, we are interested in the 'Adj Close' column.\r\n* Then it calculates the standard deviation of the column.\r\n* It checks if the current standard deviation is greater than the one in the dictionary. If it is greater, it updates the value with the new standard deviation and it also updates the name of the stock. If the standard deviation is smaller, we continue.\r\n\r\n```python\r\nfor stock in stocks_list:\r\n    print stock\r\n    try:\r\n        s = pd.io.data.get_data_yahoo(stock, start=start_date,\r\n                                      end=end_date)['Adj Close']\r\n        current_standard_deviation = s.std()\r\n        if current_standard_deviation > current_highest_adjclose['stdev']:\r\n            current_highest_adjclose['stock'] = stock\r\n            current_highest_adjclose['stdev'] = current_standard_deviation\r\n    except:\r\n        'Something happened with ', stock\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}